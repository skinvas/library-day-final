trace Listeners
https://msdn.microsoft.com/en-us/library/system.diagnostics.eventlogtracelistener(v=vs.110).aspx

https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/how-to-create-and-initialize-trace-listeners

The System.Diagnostics.Debug and System.Diagnostics.Trace classes send messages to objects called listeners that receive and process these messages. One such listener, the System.Diagnostics.DefaultTraceListener, is automatically created and initialized when tracing or debugging is enabled. If you want Trace or Debug output to be directed to any additional sources, you must create and initialize additional trace listeners.

The listeners you create should reflect your application's needs. For example, if you want a text record of all trace output, create a TextWriterTraceListener listener, which writes all output to a new text file when it is enabled. On the other hand, if you want to view output only during application execution, create a ConsoleTraceListener listener, which directs all output to a console window. The EventLogTraceListener can direct trace output to an event log. For more information, see Trace Listeners.

You can create trace listeners in an application configuration file or in your code. We recommend the use of application configuration files, because they let you add, modify, or remove trace listeners without having to change your code.

To create and use a trace listener by using a configuration file
Declare your trace listener in your application configuration file. If the listener you are creating requires any other objects, declare them as well. The following example shows how to create a listener called myListener that writes to the text file TextWriterOutput.log

<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="myListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="TextWriterOutput.log" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>

Use the Trace class in your code to write a message to the trace listener

Trace.TraceInformation("Test message.");  
// You must close or flush the trace to empty the output buffer.  
Trace.Flush();

To create and use a trace listener in code
Add the trace listener to the Listeners collection and send trace information to the listene

Trace.Listeners.Add(new TextWriterTraceListener("TextWriterOutput.log", "myListener"));  
Trace.TraceInformation("Test message.");  
// You must close or flush the trace to empty the output buffer.  
Trace.Flush();


When using Trace, Debug and TraceSource, you must have a mechanism for collecting and recording the messages that are sent. Trace messages are received by listeners. The purpose of a listener is to collect, store, and route tracing messages. Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.

Listeners are available to the Debug, Trace, and TraceSource classes, each of which can send its output to a variety of listener objects. The following are the commonly used predefined listeners:

A TextWriterTraceListener redirects output to an instance of the TextWriter class or to anything that is a Stream class. It can also write to the console or to a file, because these are Stream classes.

An EventLogTraceListener redirects output to an event log.

A DefaultTraceListener emits Write and WriteLine messages to the OutputDebugString and to the Debugger.Log method. In Visual Studio, this causes the debugging messages to appear in the Output window. Fail and failed Assert messages also emit to the OutputDebugString Windows API and the Debugger.Log method, and also cause a message box to be displayed. This behavior is the default behavior for Debug and Trace messages, because DefaultTraceListener is automatically included in every Listeners collection and is the only listener automatically included.

A ConsoleTraceListener directs tracing or debugging output to either the standard output or the standard error stream.

A DelimitedListTraceListener directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream. The trace output is in a delimited text format that uses the delimiter specified by the Delimiter property.

An XmlWriterTraceListener directs tracing or debugging output as XML-encoded data to a TextWriter or to a Stream, such as a FileStream.